---
layout:     post
title:      "简单的图片搜索服务器"
subtitle:   "图片搜索"
date:       2017-05-06
author:     "hadxu"
header-img: "img/hadxu.jpg"
tags:
    - keras
---


----------

前一段时间在学习Python机器学习的时候，对图片特征提取是非常感兴趣的，然后在github上又看见友人写的一个图片搜索服务器，于是就在友人的帮助下，完善了这个图片搜索。链接如下[点我](https://github.com/matsui528/sis)。

该教程按照flask+tensorflow+keras搭建的一个简单的sis图片搜索服务器。

首先通过VGG16模型来抽取图片的特征，并将其保存下来：
	
	import numpy as np
	import tensorflow as tf
	from keras.applications.vgg16 import VGG16, preprocess_input
	from keras.models import Model
	from keras.preprocessing import image
	
	
	class FeatureExtractor:
	    def __init__(self):
	        base_model = VGG16(weights='imagenet')
	        self.model = Model(inputs=base_model.input, outputs=base_model.get_layer('fc1').output)
	        self.graph = tf.get_default_graph()
	
	    def extract(self, img):
	        with self.graph.as_default():
	            img = img.resize((224, 224))  # VGG must take a 224x224 img as an input
	            img = img.convert('RGB')  # Make sure img is color
	            x = image.img_to_array(img)  # To np.array. Height x Width x Channel. dtype=float32
	            x = np.expand_dims(x, axis=0)  # (H, W, C)->(1, H, W, C), where the first elem is the number of img
	            x = preprocess_input(x)  # Subtracting avg values for each pixel
	            feature = self.model.predict(x)[0]  # (1, 4096) -> (4096, )
	            return feature / np.linalg.norm(feature)  # Normalize

提取本地图片的特征：

	import glob
	import os
	import pickle
	from PIL import Image
	from feature_extractor import FeatureExtractor
	
	fe = FeatureExtractor()
	
	for img_path in sorted(glob.glob('static/img/*.jpg')):
	    print(img_path)
	    img = Image.open(img_path)  # PIL image
	    print(img)
	    feature = fe.extract(img)
	    feature_path = 'static/feature/' + os.path.splitext(os.path.basename(img_path))[0] + '.pkl'
	    pickle.dump(feature, open(feature_path, 'wb'))


线上提取并比较：

	import glob
	import os
	import pickle
	
	import numpy as np
	from PIL import Image
	from flask import Flask, request, render_template
	
	from feature_extractor import FeatureExtractor
	
	app = Flask(__name__)
	
	# Read image features
	fe = FeatureExtractor()
	features = []
	img_paths = []
	for feature_path in glob.glob("static/feature/*"):
	    features.append(pickle.load(open(feature_path, 'rb')))
	    img_paths.append('static/img/' + os.path.splitext(os.path.basename(feature_path))[0] + '.jpg')
	
	
	@app.route('/', methods=['GET', 'POST'])
	def index():
	    if request.method == 'POST':
	        file = request.files['query_img']
	        img = Image.open(file.stream)  # PIL image
	        uploaded_img_path = "static/uploaded/" + "_" + file.filename
	        img.save(uploaded_img_path)
	        query = fe.extract(img)
	        dist = np.linalg.norm(features - query, axis=1)  # Do search
	        ids = np.argsort(dist)[:30]
	        dist = [dist[id] for id in ids]
	        retrieved_img_paths = [img_paths[id] for id in ids]
	
	        return render_template('index.html',
	                               query_path=uploaded_img_path,
	                               scores=zip(dist, retrieved_img_paths))
	    else:
	        return render_template('index.html')
	
	
	if __name__ == "__main__":
	    app.run(debug=True)


最终的效果是这样的：


![img](/img/in-post/sis.png)