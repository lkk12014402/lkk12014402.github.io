---
layout:     post
title:      "Pytorch源码解析"
subtitle:   "Pytorch"
date:       2018-01-03
author:     "hadxu"
header-img: "img/pytorch.jpeg"
tags:
    - Pytorch
    - Python
---

# Pytorch源码解析

> 要看的懂Pytorch源码，首先做的第一件事就是学会C与Python交互编程。等这方面基础储备够，来看Pytorch代码。

## 第一步 学会C与Python交互编程
* 与Python交互主要有三种形式 
   
   * 第一种 编写C语言文件，编译成二进制文件，使用ctype调用
   * 第二种 使用swig
   * 第三种 编写原生态的Pyobject来与Python虚拟机交互

#### 来看第一种，使用C来编写文件交互
首先编写简单的C语言文件,实现加减
```
int add_int(int,int);
float add_float(float,float);

int add_int(int a,int b){
	return a+b;
}

float add_float(float a,float b){
	return a+b;
}
```

接下来使用gcc工具来编译成so文件,会在当前的目录下生成so文件。
```
gcc -shared -Wl,-install_name,adder.so -o adder.so -fPIC add.c
```
下面打开命令行，敲入下面的代码
```
from ctypes import *
adder = CDLL('./adder.so')
res_int = adder.add_int(4,5)
print(res_int)
>>> 9
```
> 这种方法是特别简单，但是有其局限性，比如不能够很好的扩展，使用ctype库与C交互，是非常方便的。

### 来看第三种，使用C来编写文件交互
第二种就不看了，实际使用中蛮少的。第三种是非常常见的编写Python扩展的方式，利用Python自身的特性，能够编写高质量的代码。但是需要你对Python object了解，才能够与之交互。

> *提示：我使用的为Python3,如果使用的Python2，请改Python3进行测试，毕竟Python3现在是主流。*

### 第一步：编写C语言文件<Extest1.c>
这里就简单实现斐波那契数列以及字符串翻转，麻雀虽小五脏俱全。
```
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int fac(int n){
	if(n<2)
		return 1;
	return n*fac(n-1);
}

char *reverse(char *s){
	register char t,
		*p = s,
		*q = s+strlen(s)-1;
	while(p<q){
		t = *p;
		*p++ = *q;
		*q-- = t;
	}
	return s;
}
int main()
{
	char s[BUFSIZ];

	printf("4! == %d\n",fac(4));
	printf("8! == %d\n",fac(8));
	printf("16! == %d\n",fac(16));

	printf("%d\n", BUFSIZ);

	strcpy(s,"abcdef");
	printf("%s\n",reverse(s));

	return 0;
}
```
使用命令行编译
```
gcc Extest1.c -o Extest
```
就能够使用该可执行程序。

### 第二步，编写Python版的C程序。
* 包含Python头文件
* 为每一个模块函数添加形如PyObject* Module_func()的封装函数。
* 为每一个模块函数添加一个PyMethodDef ModuleMethods[]数组。
* 编写PyModuleDef的方法声明。
* 初始化函数。

1. 第一步 包含Python头文件
```
#include "Python.h"
```
这步比较简单，只要包含头文件即可。

2. 为每一个方法编写封装函数
```
static PyObject *
Extest_fac(PyObject *self, PyObject* args){
	int num;
    // 将传进来的参数进行修改成C形式。
	if(!PyArg_ParseTuple(args,"i",&num))
		return NULL;
    // 将C语言的结果返回成PyObject类型。
	return (PyObject*)Py_BuildValue("i",fac(num)); 
}
static PyObject *
Extest_doppel(PyObject*self,PyObject* args){
	char *orig_str;
	char *dupe_str;
	PyObject* retval;

	if(!PyArg_ParseTuple(args,"s",&orig_str))
		return NULL;
	retval = (PyObject*)Py_BuildValue("ss",orig_str,dupe_str=reverse(strdup(orig_str)));
	free(dupe_str);
	return retval;
}
static PyObject *
Extest_test(PyObject *self, PyObject* args){
	test();
	return (PyObject*)Py_BuildValue("");
}
```
3. 将所编写的函数包含到PyMethodDef中。
```
static PyMethodDef
ExtestMethods[] = {
	{"fac",Extest_fac,METH_VARARGS},
	{"doppel",Extest_doppel,METH_VARARGS},
	{"test",Extest_test,METH_VARARGS},
	{NULL,NULL},
};
```

4. 将模块进行定义
```
static struct PyModuleDef Extestmodule =
{
    PyModuleDef_HEAD_INIT,
    "Extest", /* name of module */
    "",          /* module documentation, may be NULL */
    -1,          /* size of per-interpreter state of the module, or -1 if the module keeps state in global variables. */
    ExtestMethods
};
```
5. 初始化
```
PyMODINIT_FUNC PyInit_Extest(void)
{
    return PyModule_Create(&Extestmodule);
}
```

> 整个来说，一共就5步，一步都不能少。

### 编写setup文件
```
from distutils.core import setup,Extension

MOD = 'Extest'

setup(name=MOD,ext_modules=[
	Extension(MOD,sources=['Extest2.c'])
	])
```
其中，Extension为扩展实例，第一个参数为模块名称，第二个参数为模块的C源文件。

接下来，就可以进行编译，安装。

```
python setup.py install
```
就可以在Python中调用了。
```
import Extest
Extest.test()
>>>
4! == 24
8! == 40320
16! == 2004189184
1024
fedcba
```

整个的Python与C交互就是这样的过程。代码在[Python C交互](https://github.com/HadXu/master_python/tree/master/Python%20C%E6%89%A9%E5%B1%95%E7%BC%96%E5%86%99)

参考：
* [stackoverflow](https://stackoverflow.com/questions/28305731/compiler-cant-find-py-initmodule-is-it-deprecated-and-if-so-what-should-i)
* [Python3.6](https://docs.python.org/3/extending/extending.html#the-module-s-method-table-and-initialization-function)
* [Pytorch源码阅读笔记](https://www.cnblogs.com/shepherd2015/p/8098020.html)

***


## 2018-01-02 22:48 更新 Python与C交互传入数组
在上一篇文章中，Python与C交互只是单一的字符，也就是单个数字 字母 字符串之类，没有涉及到数组的操作。这一章讲解如何求解数组，将输入的数组逆序输出。
> 首先要理解一个问题，就是在C语言中，数组其实就是一个指针，一个指向某一个地址的指针，那片地址存放的内容就是值。

首先，将Python传过来的值变成Pyobject对象。*“O”就是表示将任意类型转化成Pyobject指针对象*

```
PyObject* bufobj;

if(!PyArg_ParseTuple(args,"O",&bufobj))
	return NULL;
```

接下来将其变为PyListObject对象
```
PyListObject *res = (PyListObject *)bufobj;
```

进行逆转(参考的Python的PyListObject_Reverse方法。)

```
PyObject **lo = res->ob_item;
PyObject **hi = res->ob_item + Py_SIZE(res);

--hi;
while (lo < hi) {
	PyObject *t = *lo;
	*lo = *hi;
	*hi = t;
	++lo;
	--hi;
}
return Py_BuildValue("O",res);
```
将其注册到PyMethodDef中
```
{"reverse",Extest_reverse,METH_VARARGS},
```
那么整体代码为
```
static PyObject *
Extest_reverse(PyObject*self,PyObject*args){

	PyObject* bufobj;

	if(!PyArg_ParseTuple(args,"O",&bufobj))
		return NULL;



	PyListObject *res = (PyListObject *)bufobj;

	PyObject **lo = res->ob_item;
	PyObject **hi = res->ob_item + Py_SIZE(res);

	--hi;
    while (lo < hi) {
        PyObject *t = *lo;
        *lo = *hi;
        *hi = t;
        ++lo;
        --hi;
    }
	return Py_BuildValue("O",res);
}
```
接下来就可以进行调试。

***

## 2017-01-03 18:40 更新
今天看了半天的Python源码分析，终于将PyObject搞懂了。在Python语言中，所有的对象都是PyObject。而PyObject是这样定义的：
```
typedef struct _object {
    PyObject_HEAD
} PyObject;
```
同时，PyObject_HEAD则是用宏来定义：
```
#define PyObject_HEAD                   \
    _PyObject_HEAD_EXTRA                \
    Py_ssize_t ob_refcnt;               \
    struct _typeobject *ob_type;
```
这里的Py_ssize_t就是int类型，在这里，又出现_PyObject_HEAD_EXTRA这个东西，来看看,但是在实际发布的时候，是没有的。
```
#define _PyObject_HEAD_EXTRA            \
    struct _object *_ob_next;           \
    struct _object *_ob_prev;
```
到这里，PyObject结构体分析完毕，当时看见宏定义感觉不知道是什么，后来了解了，就是用后面内容的来替代前面的名称。不得不说，Python语言底层真的优美。那么定义一个基本类型就很简单了，比如要定义int类型
```
typedef struct {
    PyObject_HEAD
    long ob_ival;
} PyIntObject;
```
比如float类型
```
typedef struct {
    PyObject_HEAD
    double ob_fval;
} PyFloatObject;
```
真的是超级简单啊。
到这边，我们就可以初次看看Pytorch的TH定义。
```
struct THPTensor {
  PyObject_HEAD
  // Invariant: After __new__ (not __init__), this field is always non-NULL.
  THTensor *cdata;
};
```
这就定义了一个THPTensor。

### CUDA初探
在Pytorch中，使用CUDA是非常常见的，在pytorch中，学习到了非常多的关于CUDA的操作。首先，读取各个平台下CUDA文件
```
def find_cuda_windows_lib():
    proc = Popen(['where', 'cudart64*.dll'], stdout=PIPE, stderr=PIPE)
    out, err = proc.communicate()
    out = out.decode().strip()
    if len(out) > 0:
        if out.find('\r\n') != -1:
            out = out.split('\r\n')[0]
        cuda_lib_name = os.path.basename(out)
        cuda_lib = os.path.splitext(cuda_lib_name)[0]
        cuda_lib = str(cuda_lib)
        return ctypes.cdll.LoadLibrary(cuda_lib)
    else:
        return None

def _load_cudart():
    # First check the main program for CUDA symbols
    if platform.system() == 'Windows':
        lib = find_cuda_windows_lib()
    else:
        lib = ctypes.cdll.LoadLibrary(None)
    if hasattr(lib, 'cudaGetErrorName'):
        return lib

    raise RuntimeError(
        "couldn't find libcudart. Make sure CUDA libraries are installed in a"
        "default location, or that they're in {}."
        .format('DYLD_LIBRARY_PATH' if platform.system() == 'Darwin' else
                'LD_LIBRARY_PATH'))
```
接下来进行CUDA的各种操作，而且，这里的操作都是使用Python C的。我们先看看Python来操作GPU。
```
lib = ctypes.cdll.LoadLibrary('cudart64_80')
deviceCount = ctypes.c_int()
status = lib.cudaGetDeviceCount(ctypes.byref(deviceCount))
print(deviceCount.value)
```
这样就完成了及其简单的CUDA获取。但是在pytorch中，所有的数据都是TH类型的。
```
PyObject * THCPModule_getDeviceName_wrap(PyObject *self, PyObject *arg)
{
  HANDLE_TH_ERRORS
  THPUtils_assert(THPUtils_checkLong(arg), "invalid argument to getDeviceName");
  long device = THPUtils_unpackLong(arg);

  cudaDeviceProp prop;
  THCudaCheck(cudaGetDeviceProperties(&prop, device));
  return THPUtils_packString(prop.name);
  END_HANDLE_TH_ERRORS
}
```
以THCPModule_func_wrap格式命名的在Pytorch中都是torch._C来进行导入的。然后将该方法注册到Method中
```
static struct PyMethodDef _THCPModule_methods[] = {
	...
	{"_cuda_getDeviceName", (PyCFunction)THCPModule_getDeviceName_wrap, METH_O,   NULL},
	...
}
```

> 一直没有找到cudaGetDeviceProperties在哪？

*** 




